

plugins {
        // Plugin cho ·ª©ng d·ª•ng Android
        alias(libs.plugins.android.application)

        // Plugin Kotlin cho Android
        alias(libs.plugins.kotlin.android)

        // Plugin ƒë·ªÉ k√≠ch ho·∫°t Google Services (Firebase), nh∆∞ng ch∆∞a √°p d·ª•ng ·ªü ƒë√¢y (apply false)
        // Plugin n√†y s·∫Ω ƒë∆∞·ª£c apply th·ªß c√¥ng ·ªü cu·ªëi file v·ªõi apply(plugin = "...") ƒë·ªÉ Firebase ho·∫°t ƒë·ªông
        id("com.google.gms.google-services") version "4.4.3" apply false
        alias(libs.plugins.navigation.safeargs) // add d√≤ng n√†y ƒë·ªÉ d√πng pthuc truyen du tu fragment sang fragment
        // K√≠ch ho·∫°t annotation processor cho Glide (ho·∫∑c c√°c th∆∞ vi·ªán c·∫ßn annotation processing)
        id("kotlin-kapt")
    }

    android {
        namespace = "com.example.foodorderapp"
        compileSdk = 35

        defaultConfig {
            applicationId = "com.example.foodorderapp"
            minSdk = 24
            targetSdk = 35
            versionCode = 1
            versionName = "1.0"
            vectorDrawables.useSupportLibrary = true//
            testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        }

        buildTypes {
            release {
                isMinifyEnabled = false
                proguardFiles(
                    getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"
                )
            }
        }

        compileOptions {
            sourceCompatibility = JavaVersion.VERSION_11
            targetCompatibility = JavaVersion.VERSION_11
        }

        kotlinOptions {
            jvmTarget = "11"
        }

        buildFeatures {
            // B·∫≠t ViewBinding ƒë·ªÉ thao t√°c v·ªõi View d·ªÖ d√†ng m√† kh√¥ng c·∫ßn findViewById
            viewBinding = true
        }
        // üöÄ th√™m block n√†y ƒë·ªÉ b·ªè qua lint khi build APK
        lint {
            abortOnError = false
            checkReleaseBuilds = false
        }
    }

    dependencies {
        // Firebase BOM ƒë·ªÉ ƒë·ªìng b·ªô phi√™n b·∫£n c√°c th∆∞ vi·ªán Firebase
        implementation(platform(libs.firebase.bom))

        // Firebase Analytics (theo d√µi h√†nh vi ng∆∞·ªùi d√πng)
        implementation(libs.firebase.analytics)

        // C√°c th∆∞ vi·ªán c∆° b·∫£n c·ªßa Android
        implementation(libs.androidx.core.ktx)
        implementation(libs.androidx.appcompat)
        implementation(libs.material)
        implementation(libs.androidx.activity)
        implementation(libs.androidx.constraintlayout)

        // Th∆∞ vi·ªán t·∫°o avatar h√¨nh tr√≤n
        implementation(libs.hdodenhof.circleimageview)

        // Firebase Realtime Database
        implementation(libs.firebase.database)
        implementation(libs.firebase.firestore.ktx)
        implementation(libs.androidx.lifecycle.livedata.ktx)
        implementation(libs.androidx.room.common.jvm)
        implementation(libs.androidx.room.runtime.android)

        // Th∆∞ vi·ªán ki·ªÉm th·ª≠
        testImplementation(libs.junit)
        androidTestImplementation(libs.androidx.junit)
        androidTestImplementation(libs.androidx.espresso.core)

        // Glide: th∆∞ vi·ªán t·∫£i ·∫£nh t·ª´ internet ho·∫∑c Firebase Storage
        implementation(libs.glide)

        // Kapt ƒë·ªÉ x·ª≠ l√Ω annotation c·ªßa Glide (GlideApp)
        kapt(libs.glideCompiler)

        implementation(libs.androidx.room.runtime)
        implementation(libs.androidx.room.ktx)
        kapt(libs.androidx.room.compiler)

        //Cung c·∫•p kh·∫£ nƒÉng ƒëi·ªÅu h∆∞·ªõng cho c√°c fragment
        implementation(libs.navigation.fragment)
        implementation(libs.navigation.ui)

        implementation(libs.firebase.firestore.ktx.v2491)

        //d√πng Firebase auth ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n
        implementation(libs.firebase.auth)
        // BoM (qu·∫£n l√Ω phi√™n b·∫£n ƒë·ªìng b·ªô)
        implementation(platform(libs.firebase.bom))

        implementation(libs.firebase.auth.ktx)
        implementation(libs.play.services.auth)
        // d√πng ƒë·ªÉ t√πy ch·ªânh giao k√≠ch th∆∞·ªõc m√†n h√¨nh(T√πy ch·ªânh m√≥n ƒÉn ) v·ªÅ n·ª≠a m√†n h√¨nh ....
        implementation(libs.material)



    }

    // √Åp d·ª•ng plugin Google Services (b·∫Øt bu·ªôc khi d√πng Firebase)
    // Firebase c·∫ßn plugin n√†y ƒë·ªÉ ƒë·ªçc file google-services.json v√† c·∫•u h√¨nh d·ªãch v·ª• t∆∞∆°ng ·ª©ng
    apply(plugin = "com.google.gms.google-services")
